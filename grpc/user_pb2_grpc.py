# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import jwt

import user_pb2 as user__pb2



class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthenticateUser = channel.unary_unary(
                '/AuthService/AuthenticateUser',
                request_serializer=user__pb2.UserCredentials.SerializeToString,
                response_deserializer=user__pb2.TokenResponse.FromString,
                )
        self.ValidateToken = channel.unary_unary(
                '/AuthService/ValidateToken',
                request_serializer=user__pb2.TokenRequest.SerializeToString,
                response_deserializer=user__pb2.TokenInfo.FromString,
                )
        self.RevokeToken = channel.unary_unary(
                '/AuthService/RevokeToken',
                request_serializer=user__pb2.TokenRequest.SerializeToString,
                response_deserializer=user__pb2.TokenRevokeResponse.FromString,
                )


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AuthenticateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        #context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        #context.set_details('Method not implemented!')
        #raise NotImplementedError('Method not implemented!')
        if request.username == "user" and request.password == "password":
            token = self.generate_token(request.username)


            response = user__pb2.TokenResponse(token=token, message="Authentication successful")

        else:
            context.set_code(grpc.StatusCode.UNAUTHENTICATED)
            context.set_details("Authentication failed")
            raise grpc.RpcError(grpc.StatusCode.UNAUTHENTICATED, "Authentication failed")

        return response

    def ValidateToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        #context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        #context.set_details('Method not implemented!')
        #raise NotImplementedError('Method not implemented!')
        token = request.token

        try:
            decoded_token = jwt.decode(token, self.SECRET_KEY, algorithms=['HS256'])

            token_info = user__pb2.TokenInfo(sub=decoded_token.get('sub', ''),
                                   role=decoded_token.get('role', ''))


            response = user__pb2.TokenValidationResponse(valid=True, token_info=token_info)

        except jwt.ExpiredSignatureError:
            response = user__pb2.TokenValidationResponse(valid=False, message="Token has expired")

        except jwt.InvalidTokenError:
            response = user__pb2.TokenValidationResponse(valid=False, message="Invalid token")

        return response

    def RevokeToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!?')

    def generate_token(self, username):

        import jwt
        import datetime

        payload = {
            'sub': username,
            'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1)
        }

        # Semneaza tokenul utilizand cheia secreta
        token = jwt.encode(payload, self.SECRET_KEY, algorithm='HS256')

        return token

def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthenticateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateUser,
                    request_deserializer=user__pb2.UserCredentials.FromString,
                    response_serializer=user__pb2.TokenResponse.SerializeToString,
            ),
            'ValidateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateToken,
                    request_deserializer=user__pb2.TokenRequest.FromString,
                    response_serializer=user__pb2.TokenInfo.SerializeToString,
            ),
            'RevokeToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeToken,
                    request_deserializer=user__pb2.TokenRequest.FromString,
                    response_serializer=user__pb2.TokenRevokeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AuthenticateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AuthService/AuthenticateUser',
            user__pb2.UserCredentials.SerializeToString,
            user__pb2.TokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AuthService/ValidateToken',
            user__pb2.TokenRequest.SerializeToString,
            user__pb2.TokenInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevokeToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AuthService/RevokeToken',
            user__pb2.TokenRequest.SerializeToString,
            user__pb2.TokenRevokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
